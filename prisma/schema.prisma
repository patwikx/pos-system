datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --- CORE INFRASTRUCTURE & ADMINISTRATION ---

model User {
  id          String             @id @default(uuid())
  name        String?
  username    String?            @unique
  password    String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  isActive    Boolean            @default(false)
  assignments UserBusinessUnit[]

  // Document Ownership & Actions
  ownedSalesQuotations     SalesQuotation[]   @relation("OwnerToSQ")
  ownedSalesOrders         SalesOrder[]       @relation("OwnerToSO")
  createdDeliveries        Delivery[]         @relation("CreatorToDelivery")
  createdPurchaseRequests  PurchaseRequest[]  @relation("RequestorToPR")
  approvedPurchaseRequests PurchaseRequest[]  @relation("ApproverToPR")
  ownedPurchaseOrders      PurchaseOrder[]    @relation("OwnerToPO")
  createdReceivings        Receiving[]        @relation("ReceiverToReceiving")
  authoredJournalEntries   JournalEntry[]     @relation("AuthorToJE")
  approvedJournalEntries   JournalEntry[]     @relation("ApproverToJE")
  createdRequisitions      StockRequisition[] @relation("UserRequests")
  fulfilledRequisitions    StockRequisition[] @relation("UserFulfills")
  voidedOrderItems         OrderItem[]        @relation("VoidedItems")
  processedPayments        Payment[]
  shifts                   Shift[]
  orders                   Order[]
}

model Roles {
  id          String             @id @default(uuid())
  role        String             @unique
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  assignments UserBusinessUnit[]
}

model BusinessUnit {
  id              String             @id @default(uuid())
  name            String
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  userAssignments UserBusinessUnit[]

  // Module-specific data
  accounts           GlAccount[]
  accountingPeriods  AccountingPeriod[]
  bankAccounts       BankAccount[]
  businessPartners   BusinessPartner[]
  inventoryItems     InventoryItem[]
  inventoryLocations InventoryLocation[]
  menuItems          MenuItem[]
  menuCategories     MenuCategory[]
  modifierGroups     ModifierGroup[]
  numberingSeries    NumberingSeries[]
  terminals          PosTerminal[]
  tables             Table[]
  discounts          Discount[]
  deposits           Deposit[]
  incomingPayments   IncomingPayment[]
  outgoingPayments   OutgoingPayment[]
  // Documents
  salesQuotations    SalesQuotation[]
  salesOrders        SalesOrder[]
  deliveries         Delivery[]
  arInvoices         ARInvoice[]
  purchaseRequests   PurchaseRequest[]
  purchaseOrders     PurchaseOrder[]
  receivings         Receiving[]
  apInvoices         APInvoice[]
  journalEntries     JournalEntry[]
  orders             Order[]
  shifts             Shift[]
  reservations       Reservation[]
  financialReports   FinancialReport[]
}

model UserBusinessUnit {
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  businessUnitId String
  businessUnit   BusinessUnit @relation(fields: [businessUnitId], references: [id], onDelete: Cascade)
  roleId         String
  role           Roles        @relation(fields: [roleId], references: [id])
  assignedAt     DateTime     @default(now())

  @@id([userId, businessUnitId])
}

// --- DOCUMENT NUMBERING SERIES ---

enum DocumentType {
  SALES_QUOTATION
  SALES_ORDER
  DELIVERY
  AR_INVOICE
  PURCHASE_REQUEST
  PURCHASE_ORDER
  GOODS_RECEIPT_PO // Receiving
  AP_INVOICE
  JOURNAL_ENTRY
  INCOMING_PAYMENT
  OUTGOING_PAYMENT
}

model NumberingSeries {
  id             String       @id @default(uuid())
  name           String
  prefix         String
  nextNumber     Int          @default(1)
  documentType   DocumentType
  businessUnitId String
  businessUnit   BusinessUnit @relation(fields: [businessUnitId], references: [id])

  @@unique([documentType, businessUnitId])
}

// --- BUSINESS PARTNERS (CUSTOMERS & VENDORS) ---

enum BusinessPartnerType {
  CUSTOMER
  VENDOR
  LEAD
}

model BusinessPartner {
  id             String              @id @default(uuid())
  bpCode         String              @unique
  name           String
  type           BusinessPartnerType
  phone          String?
  email          String?
  loyaltyPoints  Int                 @default(0)
  businessUnitId String
  businessUnit   BusinessUnit        @relation(fields: [businessUnitId], references: [id])

  // Relations to documents
  salesQuotations  SalesQuotation[]
  salesOrders      SalesOrder[]
  deliveries       Delivery[]
  arInvoices       ARInvoice[]
  purchaseOrders   PurchaseOrder[]
  apInvoices       APInvoice[]
  orders           Order[]
  reservations     Reservation[]
  outgoingPayments OutgoingPayment[]
  incomingPayments IncomingPayment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// --- SALES - A/R (ACCOUNTS RECEIVABLE) ---

enum DocumentStatus {
  OPEN
  CLOSED
  CANCELLED
}

model SalesQuotation {
  id              String          @id @default(uuid())
  docNum          String          @unique
  businessUnitId  String
  businessUnit    BusinessUnit    @relation(fields: [businessUnitId], references: [id])
  bpCode          String
  businessPartner BusinessPartner @relation(fields: [bpCode], references: [bpCode])
  ownerId         String
  owner           User            @relation("OwnerToSQ", fields: [ownerId], references: [id])

  postingDate  DateTime
  validUntil   DateTime
  documentDate DateTime
  remarks      String?

  totalAmount Float
  status      DocumentStatus @default(OPEN)

  items      SalesQuotationItem[]
  salesOrder SalesOrder?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SalesQuotationItem {
  id          String         @id @default(uuid())
  docId       String
  document    SalesQuotation @relation(fields: [docId], references: [id], onDelete: Cascade)
  itemCode    String
  menuItem    MenuItem       @relation(fields: [itemCode], references: [id])
  description String
  quantity    Float
  unitPrice   Float
  lineTotal   Float
}

model SalesOrder {
  id              String          @id @default(uuid())
  docNum          String          @unique
  baseQuotationId String?         @unique
  baseQuotation   SalesQuotation? @relation(fields: [baseQuotationId], references: [id])
  businessUnitId  String
  businessUnit    BusinessUnit    @relation(fields: [businessUnitId], references: [id])
  bpCode          String
  businessPartner BusinessPartner @relation(fields: [bpCode], references: [bpCode])
  ownerId         String
  owner           User            @relation("OwnerToSO", fields: [ownerId], references: [id])

  postingDate  DateTime
  deliveryDate DateTime
  documentDate DateTime
  remarks      String?

  totalAmount Float
  status      DocumentStatus @default(OPEN)

  items      SalesOrderItem[]
  deliveries Delivery[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SalesOrderItem {
  id           String     @id @default(uuid())
  docId        String
  document     SalesOrder @relation(fields: [docId], references: [id], onDelete: Cascade)
  itemCode     String
  menuItem     MenuItem   @relation(fields: [itemCode], references: [id])
  description  String
  quantity     Float
  unitPrice    Float
  lineTotal    Float
  openQuantity Float
}

model Delivery {
  id               String          @id @default(uuid())
  docNum           String          @unique
  baseSalesOrderId String
  baseSalesOrder   SalesOrder      @relation(fields: [baseSalesOrderId], references: [id])
  businessUnitId   String
  businessUnit     BusinessUnit    @relation(fields: [businessUnitId], references: [id])
  bpCode           String
  businessPartner  BusinessPartner @relation(fields: [bpCode], references: [bpCode])
  createdBy        User            @relation("CreatorToDelivery", fields: [createdById], references: [id])
  createdById      String

  postingDate  DateTime
  documentDate DateTime
  remarks      String?

  status DocumentStatus @default(OPEN)

  items     DeliveryItem[]
  arInvoice ARInvoice?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DeliveryItem {
  id          String   @id @default(uuid())
  docId       String
  document    Delivery @relation(fields: [docId], references: [id], onDelete: Cascade)
  itemCode    String
  menuItem    MenuItem @relation(fields: [itemCode], references: [id])
  description String
  quantity    Float
}

model ARInvoice {
  id              String          @id @default(uuid())
  docNum          String          @unique
  baseDeliveryId  String?         @unique
  baseDelivery    Delivery?       @relation(fields: [baseDeliveryId], references: [id])
  businessUnitId  String
  businessUnit    BusinessUnit    @relation(fields: [businessUnitId], references: [id])
  bpCode          String
  businessPartner BusinessPartner @relation(fields: [bpCode], references: [bpCode])

  postingDate  DateTime
  dueDate      DateTime
  documentDate DateTime
  remarks      String?

  totalAmount Float
  amountPaid  Float          @default(0)
  status      DocumentStatus @default(OPEN)

  items          ARInvoiceItem[]
  journalEntryId String?         @unique
  journalEntry   JournalEntry?   @relation(fields: [journalEntryId], references: [id])
  orders         Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ARInvoiceItem {
  id          String    @id @default(uuid())
  docId       String
  document    ARInvoice @relation(fields: [docId], references: [id], onDelete: Cascade)
  itemCode    String
  menuItem    MenuItem  @relation(fields: [itemCode], references: [id])
  description String
  quantity    Float
  unitPrice   Float
  lineTotal   Float
  glAccountId String
  glAccount   GlAccount @relation(fields: [glAccountId], references: [id])
}

// --- PURCHASING - A/P (ACCOUNTS PAYABLE) ---

model PurchaseRequest {
  id             String                @id @default(uuid())
  prNumber       String                @unique
  businessUnitId String
  businessUnit   BusinessUnit          @relation(fields: [businessUnitId], references: [id])
  requestorId    String
  requestor      User                  @relation("RequestorToPR", fields: [requestorId], references: [id])
  status         PurchaseRequestStatus @default(PENDING)
  notes          String?
  approverId     String?
  approver       User?                 @relation("ApproverToPR", fields: [approverId], references: [id])
  approvalDate   DateTime?
  items          PurchaseRequestItem[]
  purchaseOrder  PurchaseOrder?
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
}

model PurchaseRequestItem {
  id                String          @id @default(uuid())
  purchaseRequestId String
  purchaseRequest   PurchaseRequest @relation(fields: [purchaseRequestId], references: [id], onDelete: Cascade)
  description       String
  requestedQuantity Float
  uomId             String?
  uom               UoM?            @relation(fields: [uomId], references: [id])
  notes             String?
}

model PurchaseOrder {
  id                String          @id @default(uuid())
  poNumber          String          @unique
  purchaseRequestId String          @unique
  purchaseRequest   PurchaseRequest @relation(fields: [purchaseRequestId], references: [id])
  businessUnitId    String
  businessUnit      BusinessUnit    @relation(fields: [businessUnitId], references: [id])
  bpCode            String
  businessPartner   BusinessPartner @relation(fields: [bpCode], references: [bpCode])
  ownerId           String
  owner             User            @relation("OwnerToPO", fields: [ownerId], references: [id])

  postingDate  DateTime
  deliveryDate DateTime
  documentDate DateTime
  remarks      String?

  totalAmount Float
  status      DocumentStatus @default(OPEN)

  items      PurchaseOrderItem[]
  receivings Receiving[]
  apInvoice  APInvoice?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PurchaseOrderItem {
  id              String         @id @default(uuid())
  docId           String
  document        PurchaseOrder  @relation(fields: [docId], references: [id], onDelete: Cascade)
  description     String
  inventoryItemId String?
  inventoryItem   InventoryItem? @relation(fields: [inventoryItemId], references: [id])
  glAccountId     String?
  glAccount       GlAccount?     @relation(fields: [glAccountId], references: [id])
  quantity        Float
  unitPrice       Float
  lineTotal       Float
  openQuantity    Float
}

model Receiving {
  id                  String        @id @default(uuid())
  docNum              String        @unique
  basePurchaseOrderId String
  basePurchaseOrder   PurchaseOrder @relation(fields: [basePurchaseOrderId], references: [id])
  businessUnitId      String
  businessUnit        BusinessUnit  @relation(fields: [businessUnitId], references: [id])
  receivedById        String
  receivedBy          User          @relation("ReceiverToReceiving", fields: [receivedById], references: [id])

  postingDate  DateTime
  documentDate DateTime
  remarks      String?

  items ReceivingItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ReceivingItem {
  id                String             @id @default(uuid())
  docId             String
  document          Receiving          @relation(fields: [docId], references: [id], onDelete: Cascade)
  inventoryItemId   String
  inventoryItem     InventoryItem      @relation(fields: [inventoryItemId], references: [id])
  quantity          Float
  expiryDate        DateTime?
  inventoryMovement InventoryMovement?
}

model APInvoice {
  id                  String          @id @default(uuid())
  docNum              String          @unique
  basePurchaseOrderId String?         @unique
  basePurchaseOrder   PurchaseOrder?  @relation(fields: [basePurchaseOrderId], references: [id])
  businessUnitId      String
  businessUnit        BusinessUnit    @relation(fields: [businessUnitId], references: [id])
  bpCode              String
  businessPartner     BusinessPartner @relation(fields: [bpCode], references: [bpCode])

  postingDate  DateTime
  dueDate      DateTime
  documentDate DateTime
  remarks      String?

  totalAmount Float
  amountPaid  Float          @default(0)
  status      DocumentStatus @default(OPEN)

  items          APInvoiceItem[]
  journalEntryId String?         @unique
  journalEntry   JournalEntry?   @relation(fields: [journalEntryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model APInvoiceItem {
  id          String    @id @default(uuid())
  docId       String
  document    APInvoice @relation(fields: [docId], references: [id], onDelete: Cascade)
  description String
  quantity    Float
  unitPrice   Float
  lineTotal   Float
  glAccountId String
  glAccount   GlAccount @relation(fields: [glAccountId], references: [id])
}

// --- BANKING ---

model BankAccount {
  id               String            @id @default(uuid())
  name             String
  bankName         String
  accountNumber    String
  glAccountId      String            @unique
  glAccount        GlAccount         @relation(fields: [glAccountId], references: [id])
  businessUnitId   String
  businessUnit     BusinessUnit      @relation(fields: [businessUnitId], references: [id])
  incomingPayments IncomingPayment[]
  outgoingPayments OutgoingPayment[]
  deposits         Deposit[]
  createdAt        DateTime          @default(now())
}

model IncomingPayment {
  id              String          @id @default(uuid())
  docNum          String          @unique
  businessUnitId  String
  businessUnit    BusinessUnit    @relation(fields: [businessUnitId], references: [id])
  bpCode          String
  businessPartner BusinessPartner @relation(fields: [bpCode], references: [bpCode])

  paymentDate   DateTime
  amount        Float
  bankAccountId String
  bankAccount   BankAccount @relation(fields: [bankAccountId], references: [id])

  journalEntryId String?       @unique
  journalEntry   JournalEntry? @relation(fields: [journalEntryId], references: [id])

  createdAt DateTime @default(now())
}

model OutgoingPayment {
  id              String          @id @default(uuid())
  docNum          String          @unique
  businessUnitId  String
  businessUnit    BusinessUnit    @relation(fields: [businessUnitId], references: [id])
  bpCode          String
  businessPartner BusinessPartner @relation(fields: [bpCode], references: [bpCode])

  paymentDate   DateTime
  amount        Float
  bankAccountId String
  bankAccount   BankAccount @relation(fields: [bankAccountId], references: [id])

  journalEntryId String?       @unique
  journalEntry   JournalEntry? @relation(fields: [journalEntryId], references: [id])

  createdAt DateTime @default(now())
}

model Deposit {
  id             String         @id @default(uuid())
  docNum         String         @unique
  businessUnitId String
  businessUnit   BusinessUnit   @relation(fields: [businessUnitId], references: [id])
  bankAccountId  String
  bankAccount    BankAccount    @relation(fields: [bankAccountId], references: [id])
  depositDate    DateTime
  amount         Float
  status         PeriodStatus   @default(OPEN)
  createdAt      DateTime       @default(now())
  journalEntries JournalEntry[] // FIX: This is now a one-to-many relation
}

// --- FINANCIALS ---

enum PeriodStatus {
  OPEN
  CLOSED
}

model GlAccount {
  id             String       @id @default(uuid())
  accountCode    String       @unique
  name           String
  balance        Float        @default(0)
  accountTypeId  String
  accountType    AccountType  @relation(fields: [accountTypeId], references: [id])
  businessUnitId String
  businessUnit   BusinessUnit @relation(fields: [businessUnitId], references: [id], onDelete: Cascade)

  journalLines       JournalEntryLine[]
  arInvoiceItems     ARInvoiceItem[]
  apInvoiceItems     APInvoiceItem[]
  purchaseOrderItems PurchaseOrderItem[]
  bankAccount        BankAccount?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AccountType {
  id       String      @id @default(uuid())
  name     String      @unique // ASSET, LIABILITY, EQUITY, REVENUE, EXPENSE
  accounts GlAccount[]
}

model JournalEntry {
  id                 String            @id @default(uuid())
  docNum             String            @unique
  postingDate        DateTime
  remarks            String?
  authorId           String
  author             User              @relation("AuthorToJE", fields: [authorId], references: [id])
  approverId         String?
  approver           User?             @relation("ApproverToJE", fields: [approverId], references: [id])
  businessUnitId     String
  businessUnit       BusinessUnit      @relation(fields: [businessUnitId], references: [id])
  accountingPeriodId String?
  accountingPeriod   AccountingPeriod? @relation(fields: [accountingPeriodId], references: [id])

  lines JournalEntryLine[]

  // Link to the source document that created this entry
  arInvoice       ARInvoice?
  apInvoice       APInvoice?
  incomingPayment IncomingPayment?
  outgoingPayment OutgoingPayment?
  depositId       String?
  deposit         Deposit?         @relation(fields: [depositId], references: [id])

  createdAt DateTime @default(now())
}

model JournalEntryLine {
  id             String       @id @default(uuid())
  journalEntryId String
  journalEntry   JournalEntry @relation(fields: [journalEntryId], references: [id], onDelete: Cascade)
  glAccountCode  String
  glAccount      GlAccount    @relation(fields: [glAccountCode], references: [accountCode])
  debit          Float?
  credit         Float?
}

// --- INVENTORY, POS & MENU ---

model InventoryLocation {
  id               String             @id @default(uuid())
  name             String
  businessUnitId   String
  businessUnit     BusinessUnit       @relation(fields: [businessUnitId], references: [id])
  stockLevels      InventoryStock[]
  requisitionsFrom StockRequisition[] @relation("FromRequisitions")
  requisitionsTo   StockRequisition[] @relation("ToRequisitions")
}

model InventoryItem {
  id                String                 @id @default(uuid())
  name              String
  description       String?
  businessUnitId    String
  businessUnit      BusinessUnit           @relation(fields: [businessUnitId], references: [id])
  purchaseItems     PurchaseOrderItem[]
  receivingItems    ReceivingItem[]
  stockLevels       InventoryStock[]
  recipeItems       RecipeItem[]
  modifiers         Modifier[]
  stockRequisitions StockRequisitionItem[]
}

model InventoryStock {
  id              String              @id @default(uuid())
  inventoryItemId String
  inventoryItem   InventoryItem       @relation(fields: [inventoryItemId], references: [id], onDelete: Cascade)
  locationId      String
  location        InventoryLocation   @relation(fields: [locationId], references: [id])
  quantityOnHand  Float
  updatedAt       DateTime            @updatedAt
  movements       InventoryMovement[]

  @@unique([inventoryItemId, locationId])
}

model InventoryMovement {
  id                 String            @id @default(uuid())
  inventoryStockId   String
  inventoryStock     InventoryStock    @relation(fields: [inventoryStockId], references: [id])
  type               MovementType
  quantity           Float
  reason             String?
  orderId            String?
  order              Order?            @relation(fields: [orderId], references: [id])
  stockRequisitionId String?
  stockRequisition   StockRequisition? @relation(fields: [stockRequisitionId], references: [id])
  receivingItemId    String?           @unique
  receivingItem      ReceivingItem?    @relation(fields: [receivingItemId], references: [id])
  createdAt          DateTime          @default(now())
}

enum MovementType {
  SALE_DEPLETION
  RECEIVING
  ADJUSTMENT
  STOCK_TRANSFER_IN
  STOCK_TRANSFER_OUT
}

model StockRequisition {
  id                String                 @id @default(uuid())
  requisitionNumber String                 @unique
  fromLocationId    String
  fromLocation      InventoryLocation      @relation("FromRequisitions", fields: [fromLocationId], references: [id])
  toLocationId      String
  toLocation        InventoryLocation      @relation("ToRequisitions", fields: [toLocationId], references: [id])
  requestorId       String
  requestor         User                   @relation("UserRequests", fields: [requestorId], references: [id])
  fulfillerId       String?
  fulfiller         User?                  @relation("UserFulfills", fields: [fulfillerId], references: [id])
  status            StockRequisitionStatus @default(PENDING)
  notes             String?
  items             StockRequisitionItem[]
  createdAt         DateTime               @default(now())
  fulfilledAt       DateTime?
  stockMovements    InventoryMovement[]
}

model StockRequisitionItem {
  id                 String           @id @default(uuid())
  stockRequisitionId String
  stockRequisition   StockRequisition @relation(fields: [stockRequisitionId], references: [id], onDelete: Cascade)
  inventoryItemId    String
  inventoryItem      InventoryItem    @relation(fields: [inventoryItemId], references: [id])
  requestedQuantity  Float
  fulfilledQuantity  Float?
}

enum StockRequisitionStatus {
  PENDING
  APPROVED
  FULFILLED
  REJECTED
}

model MenuItem {
  id                  String               @id @default(uuid())
  name                String
  price               Float
  businessUnitId      String
  businessUnit        BusinessUnit         @relation(fields: [businessUnitId], references: [id])
  salesQuotationItems SalesQuotationItem[]
  salesOrderItems     SalesOrderItem[]
  deliveryItems       DeliveryItem[]
  arInvoiceItems      ARInvoiceItem[]
  orderItems          OrderItem[]
  recipe              Recipe?
  modifierGroups      ModifierGroup[]
  categoryId          String
  category            MenuCategory         @relation(fields: [categoryId], references: [id])
}

model MenuCategory {
  id             String       @id @default(uuid())
  name           String
  businessUnitId String
  businessUnit   BusinessUnit @relation(fields: [businessUnitId], references: [id])
  menuItems      MenuItem[]
}

model ModifierGroup {
  id             String       @id @default(uuid())
  name           String
  businessUnitId String
  businessUnit   BusinessUnit @relation(fields: [businessUnitId], references: [id])
  menuItems      MenuItem[]
  modifiers      Modifier[]
}

model Modifier {
  id              String         @id @default(uuid())
  name            String
  priceChange     Float          @default(0)
  modifierGroupId String
  modifierGroup   ModifierGroup  @relation(fields: [modifierGroupId], references: [id], onDelete: Cascade)
  inventoryItemId String?
  inventoryItem   InventoryItem? @relation(fields: [inventoryItemId], references: [id])
  orderItems      OrderItem[]
}

model Recipe {
  id          String       @id @default(uuid())
  menuItemId  String       @unique
  menuItem    MenuItem     @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  recipeItems RecipeItem[]
}

model RecipeItem {
  id              String        @id @default(uuid())
  recipeId        String
  recipe          Recipe        @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  inventoryItemId String
  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id])
  quantityUsed    Float
}

model UoM {
  id                   String                @id @default(uuid())
  name                 String
  symbol               String
  purchaseRequestItems PurchaseRequestItem[]
}

enum PurchaseRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

// --- POINT OF SALE (POS) ---

model PosTerminal {
  id             String       @id @default(uuid())
  name           String
  businessUnitId String
  businessUnit   BusinessUnit @relation(fields: [businessUnitId], references: [id])
  orders         Order[]
  shifts         Shift[]
}

model Table {
  id             String        @id @default(uuid())
  name           String
  businessUnitId String
  businessUnit   BusinessUnit  @relation(fields: [businessUnitId], references: [id])
  status         TableStatus   @default(AVAILABLE)
  orders         Order[]
  reservations   Reservation[]
}

enum TableStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
}

model Reservation {
  id                String          @id @default(uuid())
  businessPartnerId String
  businessPartner   BusinessPartner @relation(fields: [businessPartnerId], references: [bpCode])
  businessUnitId    String
  businessUnit      BusinessUnit    @relation(fields: [businessUnitId], references: [id])
  tableId           String?
  table             Table?          @relation(fields: [tableId], references: [id])
  reservationTime   DateTime
  partySize         Int
  status            String
  notes             String?
}

model Shift {
  id             String       @id @default(uuid())
  businessUnitId String
  businessUnit   BusinessUnit @relation(fields: [businessUnitId], references: [id])
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  terminalId     String
  terminal       PosTerminal  @relation(fields: [terminalId], references: [id])
  startedAt      DateTime     @default(now())
  endedAt        DateTime?
  startingCash   Float
  endingCash     Float?
  payments       Payment[]
  orders         Order[]
}

model Order {
  id                String              @id @default(uuid())
  businessUnitId    String
  businessUnit      BusinessUnit        @relation(fields: [businessUnitId], references: [id])
  tableId           String?
  table             Table?              @relation(fields: [tableId], references: [id])
  userId            String
  user              User                @relation(fields: [userId], references: [id])
  terminalId        String
  terminal          PosTerminal         @relation(fields: [terminalId], references: [id])
  status            OrderStatus         @default(OPEN)
  items             OrderItem[]
  movements         InventoryMovement[]
  totalAmount       Float
  amountPaid        Float               @default(0)
  payments          Payment[]
  isPaid            Boolean             @default(false)
  discountId        String?
  discount          Discount?           @relation(fields: [discountId], references: [id])
  shiftId           String?
  shift             Shift?              @relation(fields: [shiftId], references: [id])
  businessPartnerId String?
  businessPartner   BusinessPartner?    @relation(fields: [businessPartnerId], references: [bpCode])
  arInvoiceId       String?
  arInvoice         ARInvoice?          @relation(fields: [arInvoiceId], references: [id])
  createdAt         DateTime            @default(now())
}

enum OrderStatus {
  PREPARING
  SERVED
  PAID
  CANCELLED
  OPEN
}

model OrderItem {
  id             String     @id @default(uuid())
  orderId        String
  order          Order      @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItemId     String
  menuItem       MenuItem   @relation(fields: [menuItemId], references: [id])
  quantity       Int
  priceAtSale    Float
  notes          String?
  isVoided       Boolean    @default(false)
  voidedByUserId String?
  voidedByUser   User?      @relation("VoidedItems", fields: [voidedByUserId], references: [id])
  modifiers      Modifier[]
}

model Payment {
  id                String        @id @default(uuid())
  orderId           String
  order             Order         @relation(fields: [orderId], references: [id])
  amount            Float
  paymentMethodId   String
  paymentMethod     PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  processedByUserId String
  processedByUser   User          @relation(fields: [processedByUserId], references: [id])
  shiftId           String
  shift             Shift         @relation(fields: [shiftId], references: [id])
}

model PaymentMethod {
  id       String    @id @default(uuid())
  name     String
  isActive Boolean   @default(true)
  payments Payment[]
}

model Discount {
  id             String       @id @default(uuid())
  name           String
  type           DiscountType
  value          Float
  isActive       Boolean      @default(true)
  businessUnitId String
  businessUnit   BusinessUnit @relation(fields: [businessUnitId], references: [id])
  orders         Order[]
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

// --- REPORTING ---

model FinancialReport {
  id             String                @id @default(uuid())
  businessUnitId String
  businessUnit   BusinessUnit          @relation(fields: [businessUnitId], references: [id])
  name           String
  generatedAt    DateTime              @default(now())
  lines          FinancialReportLine[]
}

model FinancialReportLine {
  id                String          @id @default(uuid())
  financialReportId String
  financialReport   FinancialReport @relation(fields: [financialReportId], references: [id])
  label             String
  value             Float
  order             Int
}

model AccountingPeriod {
  id             String         @id @default(uuid())
  name           String
  startDate      DateTime
  endDate        DateTime
  status         PeriodStatus   @default(OPEN)
  businessUnitId String
  businessUnit   BusinessUnit   @relation(fields: [businessUnitId], references: [id])
  journalEntries JournalEntry[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}
