datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 2. Define the generator. This tells Prisma to generate the Prisma Client.
// The client is a type-safe query builder for your models.
generator client {
  provider = "prisma-client-js"
}

// --- CORE INFRASTRUCTURE (Adapted for Restaurant) ---

model User {
  id        String   @id @default(uuid())
  name      String?
  username  String?  @unique
  password  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(false)
  orders    Order[]

  // A user can be assigned to many business units, each with a specific role.
  assignments UserBusinessUnit[]
}

model Roles {
  id        String   @id @default(uuid())
  role      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // A role can be assigned to many user/business unit combinations
  assignments UserBusinessUnit[]
}

model BusinessUnit {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // A business unit can have many users assigned to it
  userAssignments UserBusinessUnit[]

  // Other relations remain the same
  tables         Table[]
  terminals      PosTerminal[]
  menuCategories MenuCategory[]
  inventoryItems InventoryItem[]
  inventoryStock InventoryStock[]
  purchaseOrders PurchaseOrder[]
  orders         Order[]
  discounts      Discount[]
  menuItems      MenuItem[]
}

model UserBusinessUnit {
  userId String
  user   User   @relation(fields: [userId], references: [id])

  businessUnitId String
  businessUnit   BusinessUnit @relation(fields: [businessUnitId], references: [id])

  roleId String
  role   Roles  @relation(fields: [roleId], references: [id])

  assignedAt DateTime @default(now())

  @@id([userId, businessUnitId])
}

model PosTerminal {
  id             String       @id @default(uuid())
  name           String // e.g., "Counter 1", "Bar Terminal"
  description    String? // Optional description for the terminal
  isActive       Boolean      @default(true) // To easily enable/disable terminals
  businessUnitId String
  businessUnit   BusinessUnit @relation(fields: [businessUnitId], references: [id])
  orders         Order[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([businessUnitId])
}

// --- MENU MANAGEMENT ---

model MenuCategory {
  id             String       @id @default(uuid())
  name           String // e.g., "Appetizers", "Main Courses", "Drinks", "Desserts"
  description    String? // Optional description for the category
  isActive       Boolean      @default(true) // To easily enable/disable categories
  businessUnitId String
  businessUnit   BusinessUnit @relation(fields: [businessUnitId], references: [id])
  menuItems      MenuItem[]

  // For routing to a Kitchen Display System (KDS)
  prepStation String? // e.g., "Hot Kitchen", "Grill", "Bar"

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([businessUnitId])
}

model MenuItem {
  id          String  @id @default(uuid())
  name        String // e.g., "Classic Cheeseburger"
  description String?
  price       Float
  imageUrl    String?
  isActive    Boolean @default(true) // To easily enable/disable items

  categoryId String
  category   MenuCategory @relation(fields: [categoryId], references: [id])

  // --- ADD THESE TWO LINES ---
  businessUnitId String
  businessUnit   BusinessUnit @relation(fields: [businessUnitId], references: [id], onDelete: Cascade)

  recipe     Recipe? // A menu item can have one recipe
  orderItems OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
}

model Recipe {
  id         String   @id @default(uuid())
  menuItemId String   @unique // One-to-one with MenuItem
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)

  // The list of ingredients and quantities for this menu item
  recipeItems RecipeItem[]

  description String? // e.g., "Grill patty for 5 mins..."
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model RecipeItem {
  id              String        @id @default(uuid())
  recipeId        String
  recipe          Recipe        @relation(fields: [recipeId], references: [id])
  inventoryItemId String
  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id])

  quantityUsed Float // How much of the ingredient is used (respects the UoM)

  @@index([recipeId])
  @@index([inventoryItemId])
}

// --- INVENTORY MANAGEMENT (for Raw Ingredients) ---

model InventoryItem {
  id             String       @id @default(uuid())
  name           String // e.g., "Beef Patty 150g", "Brioche Bun", "Cheddar Cheese Slice"
  description    String? // Optional description for the item
  isActive       Boolean      @default(true) // To easily enable/disable items
  businessUnitId String
  businessUnit   BusinessUnit @relation(fields: [businessUnitId], references: [id])

  uomId String // Unit of Measure (e.g., kg, liter, piece)
  uom   UoM    @relation(fields: [uomId], references: [id])

  recipeItems RecipeItem[]
  stockLevels InventoryStock[]
  poItems     PurchaseOrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InventoryStock {
  id              String        @id @default(uuid())
  inventoryItemId String
  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id])
  businessUnitId  String
  businessUnit    BusinessUnit  @relation(fields: [businessUnitId], references: [id])

  quantityOnHand Float // Current stock level
  reorderPoint   Float @default(0) // Low stock threshold

  updatedAt DateTime            @updatedAt
  movements InventoryMovement[] // The missing back-relation

  @@unique([inventoryItemId, businessUnitId])
}

model InventoryMovement {
  id               String         @id @default(uuid())
  inventoryStockId String
  inventoryStock   InventoryStock @relation(fields: [inventoryStockId], references: [id])

  type     MovementType // SALE_DEPLETION, RECEIVING, ADJUSTMENT, SPOILAGE
  quantity Float // Change in quantity (+ or -)
  reason   String?

  // Optional link to the source of movement
  orderId         String?
  order           Order?         @relation(fields: [orderId], references: [id])
  purchaseOrderId String?
  purchaseOrder   PurchaseOrder? @relation(fields: [purchaseOrderId], references: [id])

  createdAt DateTime @default(now())

  @@index([inventoryStockId])
}

enum MovementType {
  SALE_DEPLETION
  RECEIVING
  ADJUSTMENT
  SPOILAGE
}

// --- OPERATIONS & SALES ---

model Table {
  id             String       @id @default(uuid())
  name           String // e.g., "Table 5", "Bar Seat 2"
  businessUnitId String
  businessUnit   BusinessUnit @relation(fields: [businessUnitId], references: [id])
  status         TableStatus  @default(AVAILABLE)
  orders         Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TableStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
}

model Order {
  id             String       @id @default(uuid())
  businessUnitId String
  businessUnit   BusinessUnit @relation(fields: [businessUnitId], references: [id])

  tableId String? // Orders can be for a table
  table   Table?  @relation(fields: [tableId], references: [id])

  userId String // Server/Cashier who took the order
  user   User   @relation(fields: [userId], references: [id])

  terminalId String // Which terminal was used
  terminal   PosTerminal @relation(fields: [terminalId], references: [id])

  status    OrderStatus @default(OPEN)
  orderType String      @default("Dine-In") // "Dine-In", "Take-Out", "Delivery"

  items     OrderItem[]
  movements InventoryMovement[]

  subTotal      Float
  discountValue Float @default(0) // <-- ADD THIS FIELD
  tax           Float
  totalAmount   Float

  paymentMethod String?
  isPaid        Boolean @default(false)

  // NEW RELATION TO DISCOUNT
  discountId String?
  discount   Discount? @relation(fields: [discountId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tableId])
  @@index([userId])
  @@index([terminalId])
}

enum OrderStatus {
  OPEN // Order is active at a table, items can be added/removed
  PREPARING // Order has been sent to the kitchen/bar
  SERVED // All items have been delivered to the table
  PAID // Bill has been settled
  CANCELLED
}

model OrderItem {
  id         String   @id @default(uuid())
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id])
  menuItemId String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])

  quantity    Int
  priceAtSale Float
  notes       String? // e.g., "No onions", "Extra spicy"

  @@index([orderId])
  @@index([menuItemId])
}

// --- Supplier and UoM models remain very similar, they are essential ---
// (PurchaseOrder models also included for completeness)

model Supplier {
  id             String          @id @default(uuid())
  name           String
  contactPerson  String?
  email          String?
  phone          String?
  purchaseOrders PurchaseOrder[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model PurchaseOrder {
  id                 String              @id @default(uuid())
  businessUnitId     String
  businessUnit       BusinessUnit        @relation(fields: [businessUnitId], references: [id])
  supplierId         String
  supplier           Supplier            @relation(fields: [supplierId], references: [id])
  status             String              @default("PENDING") // PENDING, SUBMITTED, COMPLETED
  items              PurchaseOrderItem[]
  inventoryMovements InventoryMovement[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

model PurchaseOrderItem {
  id              String        @id @default(uuid())
  poId            String
  po              PurchaseOrder @relation(fields: [poId], references: [id])
  inventoryItemId String
  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id])
  quantity        Float
  unitCost        Float
}

model UoM {
  id             String          @id @default(uuid())
  name           String // "Kilogram", "Gram", "Liter", "Piece", "Pack"
  symbol         String // "kg", "g", "L", "pc", "pk"
  inventoryItems InventoryItem[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Discount {
  id          String       @id @default(uuid())
  name        String // e.g., "Senior Citizen", "Employee Discount"
  description String?
  type        DiscountType // PERCENTAGE or FIXED_AMOUNT
  value       Float // e.g., 20 (for 20%) or 50.00 (for a fixed P50 discount)
  isActive    Boolean      @default(true)

  businessUnitId String
  businessUnit   BusinessUnit @relation(fields: [businessUnitId], references: [id])
  orders         Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([businessUnitId])
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}
